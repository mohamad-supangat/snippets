{
  "Import Inertiajs vue3": {
    "body": [
      "import { router} from \"@inertiajs/vue3\";"
    ],
    "description": "Import {Head} Inertia vue3",
    "prefix": "import-inertia"
  },
  "Qinput Quasar": {
    "body": "q-input(:label=\"__(${1:})\" v-model=\"${2:}\" :rules=\"[\\$rules.required()]\")",
    "description": "Qinput Quasar",
    "prefix": "qinput"
  },
  "Quasar Date Picker": {
    "body": [
      "q-input(v-model=\"${1}\", mask=\"date\", :rules=\"['date']\")",
      "    template(v-slot:append)",
      "        q-icon.cursor-pointer(name=\"mdi-calendar\")",
      "            q-popup-proxy(cover, transition-show=\"scale\", transition-hide=\"scale\")",
      "                q-date(v-model=\"${2}\")",
      "                    .row.items-center.justify-end",
      "                        q-btn(v-close-popup, label=\"Close\", color=\"primary\", flat)",
      ""
    ],
    "description": "Quasar Date Picker",
    "prefix": "date-picker"
  },
  "Required rules": {
    "body": [
      ":rules='[\\$rules.required()]'"
    ],
    "description": "Required rules",
    "prefix": "rules-required"
  },
  "Template Pug Page": {
    "body": [
      "<template lang=\"pug\">",
      "Layout",
      "</template>",
      "<script setup>",
      "import Layout from \"../layouts/panel.vue\";",
      "import { ref } from \"vue\";",
      "",
      "</script>"
    ],
    "description": "Template Pug Page",
    "prefix": "template-pug-page"
  },
  "Vue print with translation function": {
    "body": [
      "{{ __('$1') }}"
    ],
    "description": "Vue print with translation function",
    "prefix": "echo {{"
  },
  "actions::datatable custom q-card-actions": {
    "body": [
      "template(v-slot:action=\"{ props }\")",
      "    q-btn(round, dense, flat, icon=\"mdi-pencil\", color=\"secondary\" size=\"sm\" @click=\"updateData(props.row)\")",
      "        q-tooltip {{ __('Ubah Data') }}",
      "",
      "    q-btn(@click=\"deleteData(props.row)\", round, dense, color=\"negative\", flat, icon=\"mdi-trash-can-outline\" size=\"sm\" )",
      "        q-tooltip {{ __('Hapus Data') }}"
    ],
    "prefix": "actions::datatable custom q-card-actions"
  },
  "const:filter": {
    "body": "const filter = ref({});",
    "prefix": "const:filter"
  },
  "constform": {
    "body": "const form = ref({});",
    "prefix": "constform"
  },
  "custom-datatable-status::pug": {
    "body": "template(v-slot:custom-${1}=\"{ props }\")",
    "prefix": "custom-datatable-status::pug"
  },
  "dashboard-card::component": {
    "body": "import DashboardCard from '@/views/components/dashboard-card.vue';",
    "prefix": "dashboard-card::component"
  },
  "datatable::pug": {
    "body": "Datatable(:url=\"\\$route('${1}')\" :columns=\"columns\" ref=\"datatable\" :filter=\"${2:filter}\" include=\"${3}\" :customTd=\"[${4}]\" append=\"${5}\")",
    "prefix": "datatable::pug"
  },
  "defineModel": {
    "body": [
      "const $0 = defineModel({",
      "\t$0",
      "});"
    ],
    "description": "Define Model",
    "prefix": "defineModel"
  },
  "function:delete": {
    "body": [
      "function deleteData(row) {",
      "    Dialog.create({",
      "        title: __('Lanjutkan'),",
      "        message: __(`Apakah kamu yakin akan menghapus data ${1:} ?`),",
      "        ok: {",
      "            label: 'Lanjutkan',",
      "            color: 'negative',",
      "            icon: 'mdi-trash-can-outline',",
      "        },",
      "        cancel: 'Batal',",
      "        persistent: true,",
      "    }).onOk(() => {",
      "        api.delete(",
      "            route('${2:}', {",
      "                ${3:}: row.id,",
      "            }),",
      "        ).then((d) => {",
      "            toast.request(d.status, d.message);",
      "            if (d.status) {",
      "                datatable.value.refresh();",
      "            }",
      "        });",
      "    });",
      "}"
    ],
    "prefix": "function:delete"
  },
  "function:deleteData(row)": {
    "body": [
      "function deleteData(row) {",
      "    Dialog.create({",
      "        title: __('Hapus Transaksi :type', { type: row.type_label }),",
      "        message: __('Data yang di hapus tidak dapat di kembalikan'),",
      "        ok: {",
      "            label: __('Lanjutkan'),",
      "            color: 'negative',",
      "        },",
      "        cancel: true,",
      "        persistent: true,",
      "    }).onOk(async () => {",
      "        const response = await api.delete(",
      "            route('${1:}', {",
      "                ${2:}: row.id,",
      "            }),",
      "        );",
      "",
      "        toast.request(response.status, response.message);",
      "        datatable.value.refresh();",
      "    });",
      "}"
    ],
    "prefix": "function:deleteData(row)"
  },
  "functon:edit": {
    "body": [
      "function editData(row) {",
      "    Dialog.create({",
      "        component: DialogForm,",
      "        parent: this,",
      "        componentProps: {",
      "            ${1:}: copy(row),",
      "        },",
      "    }).onOk(() => {",
      "        datatable.value.refresh();",
      "    });",
      "}"
    ],
    "prefix": "functon:edit"
  },
  "import:component in another modules": {
    "body": "import ${1} from '@${2}/views/components/${3}.vue';",
    "prefix": "import:component in another modules"
  },
  "label` with translate": {
    "body": [
      ":label=\"__('$1')\" "
    ],
    "description": "label` with translate",
    "prefix": "label-with-translate"
  },
  "q-btn::delete": {
    "body": [
      "q-btn(",
      "    round,",
      "    flat,",
      "    color=\"negative\",",
      "    icon=\"mdi-trash-can-outline\",",
      "    noWrap,",
      "    @click=\"${1:}\",",
      "    v-if=\"${2:}\"",
      ")"
    ],
    "prefix": "q-btn::delete"
  },
  "q-btn:close-dialog": {
    "body": "q-btn(icon=\"mdi-close\" flat round dense @click=\"onDialogCancel\")",
    "prefix": "q-btn:close-dialog"
  },
  "q-btn:edit": {
    "body": [
      "q-btn(",
      "    round,",
      "    flat,",
      "    color=\"secondary\",",
      "    icon=\"mdi-book-edit-outline\",",
      "    noWrap,",
      "    @click=\"${1:}\",",
      "    v-if=\"${2:}\"",
      ")"
    ],
    "prefix": "q-btn:edit"
  },
  "q-card-actions-with-buttons": {
    "body": [
      "q-card-actions(align='right')",
      "  q-btn(color='positive' icon=\"mdi-content-save\" :label=\"__('Simpan data')\" @click='submit' :loading=\"loading.submit\")",
      "  q-btn(label='Cancel' @click='${1}' flat)"
    ],
    "prefix": "q-card-actions-with-buttons"
  },
  "sekolahku:datatable-page": {
    "body": [
      "<template lang=\"pug\">",
      "Layout",
      "    div",
      "        Datatable(",
      "            :url=\"\\$route('course.datatable')\",",
      "            :columns=\"columns\",",
      "            @getData=\"getData\",",
      "            ref=\"datatable\",",
      "            :filter=\"filter\"",
      "        )",
      "            template(v-slot:action=\"{ props }\")",
      "                q-btn(",
      "                    round,",
      "                    flat,",
      "                    color=\"primary\",",
      "                    icon=\"mdi-book-open-variant-outline\",",
      "                    noWrap,",
      "                    @click=\"showData(props.row)\"",
      "                )",
      "                q-btn(",
      "                    round,",
      "                    flat,",
      "                    color=\"secondary\",",
      "                    icon=\"mdi-book-edit-outline\",",
      "                    noWrap,",
      "                    @click=\"editData(props.row)\",",
      "                    v-if=\"\\$can('edit savings book student')\"",
      "                )",
      "                q-btn(",
      "                    round,",
      "                    flat,",
      "                    color=\"negative\",",
      "                    icon=\"mdi-trash-can-outline\",",
      "                    noWrap,",
      "                    @click=\"deleteData(props.row)\",",
      "                    v-if=\"\\$can('delete savings book student')\"",
      "                )",
      "",
      "            template(v-slot:top-left)",
      "                q-btn(color=\"primary\", push, :label=\"__('Tambah Transaksi')\", icon=\"mdi-plus\", @click=\"add\")",
      "                q-btn-dropdown.q-ml-md(color=\"green\", icon=\"mdi-microsoft-excel\")",
      "                    q-list",
      "                        q-item(clickable, @click=\"exportExcel\")",
      "                            q-item-section(avatar)",
      "                                q-icon(name=\"mdi-cloud-download-outline\")",
      "                            q-item-section",
      "                                q-item-label {{ __('Download Excel Riwayat') }}",
      "</template>",
      "<script setup>",
      "import { chunk } from 'lodash';",
      "import { ref } from 'vue';",
      "import { Dialog } from 'quasar';",
      "import Layout from '../../layouts/panel-teacher.vue';",
      "import Datatable from '@/views/components/datatable.vue';",
      "import DashboardCard from '@/views/components/dashboard-card.vue';",
      "import DialogForm from '../../dialogs/course/form.vue';",
      "",
      "import { moment, api, toast, generateFilter, moneyHelperText, moneyFormat, copy } from '@/scripts';",
      "",
      "const props = defineProps({});",
      "",
      "const totalAmount = ref({});",
      "",
      "const loading = ref({",
      "    amount: true,",
      "});",
      "",
      "const datatable = ref(null);",
      "const filter = ref({",
      "    date: moment().format('YYYY-MM-DD'),",
      "});",
      "",
      "function add() {",
      "    Dialog.create({",
      "        component: DialogForm,",
      "    }).onOk(() => {",
      "        datatable.value.refresh();",
      "    });",
      "}",
      "",
      "function showData(transaction) {",
      "    Dialog.create({",
      "        component: DialogForm,",
      "        componentProps: {",
      "            transaction_id: transaction.id,",
      "            detail_mode: true,",
      "        },",
      "    }).onOk(() => {",
      "        datatable.value.refresh();",
      "    });",
      "}",
      "",
      "function editData(transaction) {",
      "    Dialog.create({",
      "        component: DialogForm,",
      "        componentProps: {",
      "            transaction_id: transaction.id,",
      "        },",
      "    }).onOk(() => {",
      "        datatable.value.refresh();",
      "    });",
      "}",
      "",
      "function deleteData(row) {",
      "    Dialog.create({",
      "        title: __('Hapus Transaksi :type Tabungan', { type: row.type_label }),",
      "        message: __('Data yang di hapus tidak dapat di kembalikan'),",
      "        ok: {",
      "            label: __('Lanjutkan'),",
      "            color: 'negative',",
      "        },",
      "        cancel: true,",
      "        persistent: true,",
      "    }).onOk(async () => {",
      "        const response = await api.delete(",
      "            route('savings_book.transaction.delete', {",
      "                transaction: row.id,",
      "            }),",
      "        );",
      "",
      "        toast.request(response.status, response.message);",
      "        datatable.value.refresh();",
      "    });",
      "}",
      "",
      "const columns = [",
      "    {",
      "        name: 'name',",
      "        label: __('Judul'),",
      "        field: 'number',",
      "        align: 'left',",
      "        sortable: true,",
      "    },",
      "",
      "    {",
      "        name: 'actions',",
      "        label: 'Aksi',",
      "        field: '',",
      "    },",
      "];",
      "",
      "function exportExcel() {",
      "    if (!filter.value.date) {",
      "        toast.error(__('Silahkan minimal pilih filter tanggal terlebih dahulu'));",
      "        return;",
      "    }",
      "",
      "    window.open(",
      "        route('savings_book.transaction.excel', {",
      "            date: filter.value.date,",
      "            ...generateFilter(filter.value),",
      "        }),",
      "        '_blank',",
      "    );",
      "}",
      "",
      "function getData(params) {",
      "    loading.value.amount = true;",
      "    api.get(route('savings_book.transaction.totalAmount'), {",
      "        params,",
      "    })",
      "        .then((data) => {",
      "            totalAmount.value = data;",
      "        })",
      "        .finally(() => {",
      "            loading.value.amount = false;",
      "        });",
      "}",
      "</script>"
    ],
    "prefix": "sekolahku:datatable-page"
  },
  "template-dialog-quasar": {
    "body": [
      "<template lang=\"pug\">",
      "q-form(@submit=\"submit\")",
      "    q-dialog(ref=\"dialogRef\", @hide=\"onDialogHide\")",
      "        q-card.q-dialog-plugin",
      "            q-toolbar",
      "                .text-h5 {{ __('') }}",
      "            q-separator",
      "            q-card-section",
      "            q-separator",
      "            q-card-actions(align=\"right\")",
      "                q-btn(:label=\"__('Batal')\", @click=\"onDialogCancel\", flat)",
      "                q-btn(",
      "                    color=\"positive\",",
      "                    icon=\"mdi-content-save\",",
      "                    :label=\"__('Simpan data')\",",
      "                    type=\"submit\",",
      "                    :loading=\"loading.submit\",",
      "                    push",
      "                )",
      "</template>",
      "",
      "<script setup>",
      "import { useDialogPluginComponent } from 'quasar';",
      "import { api, toast } from '@/scripts';",
      "import { ref } from 'vue';",
      "const props = defineProps({",
      "    detail_mode: Boolean,",
      "});",
      "",
      "defineEmits([...useDialogPluginComponent.emits]);",
      "",
      "const { dialogRef, onDialogHide, onDialogOK, onDialogCancel } = useDialogPluginComponent();",
      "function onOKClick() {",
      "    onDialogOK();",
      "}",
      "",
      "const loading = ref({ submit: false });",
      "async function submit() {",
      "    loading.value.submit = true;",
      "    try {",
      "        const response = await api.post(route('elearning.teacher.study.material.action'), form.value);",
      "        toast.request(response.status, response.message);",
      "        if (response.status) {",
      "            onDialogOK();",
      "        }",
      "    } finally {",
      "        loading.value.submit = false;",
      "    }",
      "}",
      "</script>"
    ],
    "prefix": "template-dialog-quasar"
  }
}
